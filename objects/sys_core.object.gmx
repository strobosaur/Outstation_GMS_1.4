<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT ENUMS &amp; GLOBALS

    // GLOBALS
    global.wrnd = 0
    
    // ALPHA
    global.leader = 0;
    global.alpha2 = 0;
    global.alpha3 = 0;
    
    // COLORS
    global.menu_color1 = 0;
    
    // INTERTIA &amp;&amp; GRAVITY
    global.inertia = 0.05;
    global.inertia_air = 0.005;
    global.grav = 0.04;
    global.time_started = 0;
    global.waves_cleared = 0;
    global.draw_controls = false;
    
    // TEAM
    global.team = ds_list_create();
    global.droids = ds_list_create();
    global.turrets = ds_list_create();
    
    global.turret_active = 0;
    global.team_active = 0;
    global.team_members = 0;
    
    global.turret_switch = false;
    
    gamepad_slot = 0;
    
    // STATSBOOK
    global.statsbook = ds_map_create();
    
    // MAKE INVENTORY
    global.inventory = ds_list_create(); //ds_map_create();
    trait_pool = ds_list_create();
    
    global.current_pickup = noone;
    global.interactable = noone;
    
    global.draw_paths = false;
    
    // ITEM TYPES
    
    // ADD ITEM TYPE LISTS TO INVENTORY
    for(var i = 0; i &lt; itemtype.stop; i++)
    {
        ds_list_add(global.inventory, ds_list_create())
    }
    
    interact_list = ds_list_create();
    
    // INIT ENUMS
        
    enum statstype {
        stats_a,
        stats_b,
        stats_x,
        stats_w,
        stats_i,
        stats_skl,
        stats_am,
        stats_amr,
        stats_dm,
        stats_trt,
        stop
        }
        
    enum wpntype {
        mw,
        lw,
        rw,
        hw,
        bw,
        fw,
        tw,
        rngw,
        mlw,
        allw,
        stop
        }
        
    enum amx {
        th_rolls,
        th_sides,
        th_plus,
        d_rolls,
        d_sides,
        d_plus,
        d_prc,
        atk_spd,
        crt_rolls,
        crt_chance,
        crt_multiplier,
        shots,
        charges,
        range,
        spread,
        swarm,
        knock,
        knock_r,
        suppr,
        shock,
        splash,
        splash_r,
        lifesteal,
        penetration,
        stop
        }
    
    enum dmx {
        ml_prc,
        rng_prc,
        ml_pts,
        rng_pts,
        all_prc,
        all_pts,
        ml_tohit,
        rng_tohit,
        all_tohit,
        ac,
        stability,
        stop
        }
        
    enum eqp {
        weapon,
        torso,
        head,
        implant1,
        implant2,
        stop
        }
        
    enum itemtype {
        weapon,
        armor,
        headgear,
        implant1,
        implant2,
        pickup,
        turret,
        skill,
        melee_weapon,
        ranged_weapon,
        stop
        }
        
    enum itembonus {
        statstype,
        type,
        name,
        operation,
        amount,
        value,
        wpntype,
        stop
        }
        
    enum skills {    
        skl_mw,
        skl_lw,
        skl_hw,
        skl_tw,
        skl_aim,
        skl_def,
        skl_fgt,
        skl_crt,
        skl_agl,
        skl_spr,
        skl_shk,
        skl_amr,
        skl_rw,
        skl_bw,
        skl_fw,
        stop
        }
        
    enum a_stats {
        str,
        dex,
        con,
        skl,
        def,
        bth,
        th_plus,
        bac,
        stop
        }
        
    enum timer {
        wp01,
        wp02,
        wp03,
        dust,
        charge01,
        charge02,
        dash01,
        dash02,
        state,
        level_up,
        save01,
        save02,
        engage,
        chosen01,
        chosen02,
        regen,
        regen02,
        armor_regen,
        flee_cd,
        flee_press,
        flee_limit,
        avoid01,
        anim01,
        shock01,
        shellshock,
        suppressed,
        path01,
        path_distance,
        path_stay_close,
        flash,
        stop
        }
        
    enum spawntimer {
        main01,
        stop
        }
        
    enum wpspr {
        unarmed,
        rifle,
        powerfist,
        blade,
        stop
        }
        
    enum xmenu {
        name,
        scr_exe,
        main,
        text,
        extra,
        draw,
        stop
        }
        
    enum ymenu {
        stats,
        wpn,
        skill,
        item,
        options,
        upgrade,
        stop
        }
                
    enum tilemap {
        E = 1,
        S = 2,
        SE = 3,
        W = 4,
        SW = 6,
        N = 8,
        NE = 9,
        NW = 12,
        stop
        }
        
    enum tiletype {
        GRASS01,
        GRASS02,
        STONE01,
        VOID,
        stop
        }
        
    enum mapcode {
        void = 0,
        wall,
        hole,
        door,
        ground,
        walkway,
        passage,
        wall2,
        doorwall,
        canbeall,
        canbehole,
        canbewall,
        startpoint,
        room_center,
        start_door,
        stop
        }
        
    enum operation {
        add,
        subtract,
        multiply,
        divide,
        stop
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT POOL LISTS

    ds_list_add(trait_pool, trait_tough);
    ds_list_add(trait_pool, trait_agile);
    ds_list_add(trait_pool, trait_sadist);
    ds_list_add(trait_pool, trait_perceptive);
    ds_list_add(trait_pool, trait_mauler);
    ds_list_add(trait_pool, trait_sureshot);
    ds_list_add(trait_pool, trait_reckless);
    ds_list_add(trait_pool, trait_spectacular);
    ds_list_add(trait_pool, trait_infantry);
    
    ds_list_shuffle(trait_pool);
    
    
    
//    ds_list_add(global.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT GAME

    // RANDOMIZE SEED
    
    randomize();

    // INIT GLOBALS
    
    init_globals(480, 270);
//    init_globals(512, 288);
    
    // INIT DISPLAY
    
    instance_create(0, 0, sys_display);
    instance_create(0, 0, unit_data);
    instance_create(0, 0, oResource);
    instance_create(0, 0, sys_mapgen);
    instance_create(0, 0, spawn_control);
    instance_create(0, 0, sys_inventory);
    instance_create(0, 0, oHud);
    instance_create(0, 0, sys_fx_control);
    instance_create(0, 0, sys_spawn);
    instance_create(0, 0, sys_light);
    
    // MAKE PERSISTENT
    
    if !persistent {persistent = true;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT AUDIO

    global.effects_volume = 0.2;
    audio_master_gain(0.25);
    audio_group_load(effects);
    audio_group_load(music);
    
    audio_group_set_gain(effects, 0.2, 0);
    audio_group_set_gain(music, 0.2, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT MENU

    global.menu = ds_grid_create(6, 6);
    ds_grid_clear(global.menu, 0);
    
    menutext[0] = 0;
    weapontext[0] = 0;
    
    // MENU TEXT    
    for (var i = 0; i &lt; (a_stats.stop - 1); i++)
    {
        menutext[i] = 0;
    }
    
    for (var i = 0; i &lt; skills.stop; i++)
    {
        skilltext[i] = 0;
    }
    
/*    skilltext[skills.skl_mw] = "melee weapons";
    skilltext[skills.skl_lw] = "light weapons";
    skilltext[skills.skl_rw] = "rifles";
    skilltext[skills.skl_hw] = "heavy weapons";
    skilltext[skills.skl_bw] = "blades";
    skilltext[skills.skl_fw] = "fist weapons";
    skilltext[skills.skl_tw] = "turrets";
    skilltext[skills.skl_aim] = "accuracy";
    skilltext[skills.skl_def] = "defense";
    skilltext[skills.skl_fgt] = "combat";
    skilltext[skills.skl_crt] = "criticals";
    skilltext[skills.skl_spr] = "suppressor";
    skilltext[skills.skl_shk] = "shock";
    skilltext[skills.skl_agl] = "agility";
    skilltext[skills.skl_amr] = "armor";
//        menutext[st.wep] = "Weapon:";
//        menutext[statistics.lvl] = "Level:";
        menutext[a_stats.str] = "Strength:";
        menutext[a_stats.dex] = "Dexterity:";
        menutext[a_stats.con] = "Consitution:";
        menutext[a_stats.skl] = "Skill:";
        menutext[a_stats.def] = "Defense:";
        var start = array_length_1d(menutext)-1;
        menutext[start + b_stats.regen] = "Reg/s:";
        menutext[start + b_stats.hp] = "HP:";
        menutext[start + b_stats.hpmax] = "Max HP:";*/
//        menutext[start + wp.name] = "Max HP:";
    
    // WEAPONS TEXT
/*    for (var i = 0; i &lt; (wp.stop - 1); i++)
    {
        weapontext[i] = 0;
    }
        weapontext[wp.name] = "Weapon:"
        weapontext[wp.dmg] = "Damage:"
//        weapontext[wp.pwr] = "Power:"
        weapontext[wp.spd] = "Attack speed:"
        weapontext[wp.rng] = "Range:"
        weapontext[wp.spr] = "Spread:"
        weapontext[wp.shots] = "Burst:"
        weapontext[wp.crt] = "Critical:"
        weapontext[wp.swm] = "Swarm:"*/

    // MENU GRID
    global.menu[# ymenu.stats, xmenu.name] = "ATTRIBUTES";
    global.menu[# ymenu.wpn, xmenu.name] = "WEAPON";
    global.menu[# ymenu.skill, xmenu.name] = "SKILLS";
    global.menu[# ymenu.item, xmenu.name] = "INVENTORY";
    global.menu[# ymenu.options, xmenu.name] = "OPTIONS";
    global.menu[# ymenu.upgrade, xmenu.name] = "UPGRADE";

    global.menu[# ymenu.stats, xmenu.text] = menutext;
    global.menu[# ymenu.wpn, xmenu.text] = weapontext;
    global.menu[# ymenu.skill, xmenu.text] = skilltext;
    
    global.menu[# ymenu.stats, xmenu.main] = 0
    global.menu[# ymenu.wpn, xmenu.main] = 0
    global.menu[# ymenu.skill, xmenu.main] = 0
    global.menu[# ymenu.item, xmenu.main] = 0
    global.menu[# ymenu.options, xmenu.main] = 0

   /* global.menu[# ymenu.stats, xmenu.scr_exe] = menu_attributes;
    global.menu[# ymenu.wpn, xmenu.scr_exe] = menu_weapon;
    global.menu[# ymenu.skill, xmenu.scr_exe] = menu_skills;
    global.menu[# ymenu.item, xmenu.scr_exe] = menu_items;
    global.menu[# ymenu.options, xmenu.scr_exe] = menu_options;
    global.menu[# ymenu.upgrade, xmenu.scr_exe] = menu_level_up;*/

    global.menu[# ymenu.stats, xmenu.draw] = menu_draw_stats;
    global.menu[# ymenu.wpn, xmenu.draw] = menu_draw_wpn;
    global.menu[# ymenu.skill, xmenu.draw] = menu_draw_skills;
    global.menu[# ymenu.item, xmenu.draw] = menu_draw_items;
    global.menu[# ymenu.options, xmenu.draw] = menu_draw_options;
//    global.menu[# 5, xmenu.draw] = menu_draw_options;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TIME &amp; ALPHA &amp; CHALLENGE

    // TIME
    global.time += (1/room_speed);
    
    if global.started == true
    &amp;&amp; global.paused == false
    {
        global.time_started += (1/room_speed);
    }
    
    ///UPDATE HUD ALPHA
    global.alpha = pulse_mid(12, 0.05, 0.875) * pulse_mid(2.97, 0.05, 0.85); // CRT FLICKER
    global.alpha2 = pulse_mid(12, 0.075, 0.875) * pulse_mid(3.75, 0.125, 0.85); // PULSE SINE
    global.alpha3 = pulse_mid(11.5, 0.045, 0.45); // CRT BACKGROUND FLICKER
    
    global.menu_color1 = make_colour_hsv(pulse_mid(0.1, 0.075 * 255, 110), 85, 255); // BONUS COLOR GREEN
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MASTER CONTROLS

    get_input();

    // PLAY MUSIC
    if !audio_is_playing(musTheme)
    {
        audio_play_sound(musTheme, 100, true);
    }

    // EFFECTS VOLUME CONTROL
    if keyboard_check_pressed(vk_add)
    {
        global.effects_volume += 0.1;
//        audio_set_master_gain(1, global.effects_volume);
//        audio_set_master_gain(2, global.effects_volume);
    }
    
    if keyboard_check_pressed(vk_subtract)
    {
        global.effects_volume -= 0.1;
//        audio_set_master_gain(1, global.effects_volume);
//        audio_set_master_gain(2, global.effects_volume);
    }
    
    clamp(global.effects_volume, 0, 1);
    audio_set_master_gain(0, global.effects_volume);
    
    // FULLSCREEN
    if keyboard_check(vk_lalt)
    &amp;&amp; keyboard_check_pressed(vk_enter)
    {
        global.fullscreen = !global.fullscreen;
    }
    
    // CEATING!!!
    
    // WEAPONS
    if keyboard_check(vk_lalt)
    &amp;&amp; keyboard_check_pressed(ord('W'))
    {
        to_inventory(generate_item(itemtype.turret, choose("gun post"), -1, -1, -1));
        to_inventory(generate_item(itemtype.turret, choose("auto cannon"), -1, -1, -1));
        to_inventory(generate_item(itemtype.turret, choose("turret"), -1, -1, -1));
        to_inventory(generate_item(itemtype.turret, choose("f. grenade"), -1, -1, -1));
        to_inventory(generate_item(itemtype.implant1, "implant", -1, -1, -1));
        to_inventory(generate_item(itemtype.implant1, "implant", -1, -1, -1));
        to_inventory(generate_item(itemtype.implant1, "implant",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "machinegun",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "rifle",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "powerfist",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "blade",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "shotgun",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "g. launcher",  -1, -1, -1));
        to_inventory(generate_item(itemtype.weapon, "blaster",  -1, -1, -1));
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PAUSE

/*    get_input();

    // PAUSE GAME!
    if global.paused == false &amp;&amp; GPX_p
    {
        // IF TURRET
        if global.turret_switch == true
        {
            global.leader = ds_list_find_value(global.team, 0);
            global.turret_switch = false;
        }
        
        // MAKE LEADER ACTIVE
        global.team_active = ds_list_find_index(global.team, global.leader);
        
        // AUDIO
        audio_play_sound(sndMenu01, 20, false);
        
        global.paused = true;
        pause_screen(rm_inventory);
        exit;
    }
    
    // UNPAUSING
    if (global.paused == true) &amp;&amp; (room == global.unpause_room)
    {
        global.paused = false;
        
        // Only run the un-pause code if we actually un-paused.
        global.unpause_room = -1;

        // Only do this if you--skipped step 1--created the pause screenshot of the game.
        sprite_delete(global.pause_img);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHANGE PLAYER

    get_input();
    
    if ds_list_empty(global.team) { game_restart();}
    
    /// DRAW PATH GRID ETC

    if keyboard_check_pressed(vk_f1) { global.draw_paths = !global.draw_paths; }
    
    // NOT PAUSED
    if global.paused == false
    {
        // BUTTONS PUSHED
        if !ds_list_empty(global.team) 
        &amp;&amp; !global.paused
        {
            var new_guy = global.leader;
            
            // TURRET SWITCH
            if GPY 
            {
                global.turret_switch = true;
            }
            
            // IF NO TURRETS
            if global.turret_switch 
            &amp;&amp; ds_list_empty(global.turrets)
            {
                global.turret_switch = false;
            }
            
            // BUTTON PRESSED / SCROLL LISTS ================================
            if (GPR_p || GPL_p)
            {
                oHud.drawstate = hud_draw_idle;
                
                if !GPY { global.turret_switch = false; }
                // CYCLE MEMBERS
                var size = ds_list_size(global.team)-1;
                
                // BUTTON DIR
                var choice_dir = (GPR_p - GPL_p);
                
                // SCROLL TEAM LISTS
                global.team_active = (global.team_active + choice_dir) mod (size + 1);
                if global.team_active &lt; 0 { global.team_active = size; }
                
                // TURRET CHECK
                new_guy = global.team[| global.team_active];
                
                var i = 0;
                while new_guy.mounted != global.turret_switch
                {
                    // NEXT IN LINE
                    global.team_active = (global.team_active + choice_dir) mod (size + 1);
                    if global.team_active &lt; 0 { global.team_active = size; }
                    
                    new_guy = global.team[| global.team_active];
                    i++
                    
                    // FAILSAFE
                    if i == size { new_guy = global.team[| 0]; break; }
                }
            }
                
            // MAKE LEADER SWITCH
            if (global.team_active != global.team[| ds_list_find_index(global.team, global.leader)])
            {
                // OLD LEADER
                var prev = global.leader;
                
                // MAKE CHOICE
                if new_guy != prev
                {
                    // GIVE LEADER ROLE
                    global.leader = new_guy;
                    // PLAY SOUND
                    audio_play_sound(sndBwop01, 10, false);
                    
                    with global.leader
                    {
                        timers[timer.chosen01] = room_speed * 0.75
                        cross = oCross;
                        oCross.player = id;
                        state = new_state;
                    }
                    
                    // THAT OTHER GUY
                    with prev
                    {
                        timers[timer.chosen01] = 0;
                        cross = noone;
                        state = new_state;
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VIBRATE

    if global.vibrate &gt; 0.001
    {
        gamepad_set_vibration(0, global.vibrate, global.vibrate);
        global.vibrate *= 0.75;
    }
    else
    {
        gamepad_set_vibration(0, 0, 0);
    }
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NPC DROID

    get_input();

    // SPAWN DROID
    if GPSL_p 
    &amp;&amp; (global.r1 &gt;= 10)
    &amp;&amp; !global.paused
    {
        var pos = random_radius_free(global.leader.x, global.leader.y, 64, global.collision_grid, 1);
        global.r1 -= 10;
        instance_create(pos[0], pos[1], oDroid);
        audio_play_sound(sndPowerup01, 5, false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GAMEPAD DETECTION

    switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
    {
        case "gamepad discovered":                     // A game pad has been discovered
        global.gamepad_slot = async_load[? "pad_index"];       // Get the pad index value from the async_load map
        break;
            
        case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
        global.gamepad_slot = async_load[? "pad_index"];       // Get the pad index
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEANUP

    // GAMEPAD VIBRATION
    gamepad_set_vibration(0, 0, 0);
    
    // DS 
    ds_grid_destroy(global.menu);
    
    ds_grid_destroy(global.pathgrid);
    ds_grid_destroy(global.collision_grid);
//    ds_grid_destroy(sys_mapgen.mapgrid);
    
    ds_map_destroy(global.statsbook);
    ds_list_destroy(global.team);
    ds_list_destroy(global.turrets);
    ds_list_destroy(trait_pool);
    ds_list_destroy(interact_list);
    
    
    // INVENTORY
    while !ds_list_empty(global.inventory)
    {
        // KILL SEPARATE LISTS
        var list = ds_list_find_value(global.inventory, 0)
        while !ds_list_empty(global.inventory)
        {
            // KILL ITEMS IN LIST
            var a = ds_list_find_value(global.inventory, 0);
            ds_map_destroy(a);
            ds_list_delete(global.inventory, 0);
        }
        // KILL EMPTY LIST
        var a = ds_list_find_value(global.inventory, 0);
    }
    // DESTROY GLOBAL INVENTORY
    ds_list_destroy(global.inventory);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// REBOOT IMMINENT

    game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BÖG HORA ALLT SKA DÖ

    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
