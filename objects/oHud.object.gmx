<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT HUD

    _fade01 = 0;
    fade_from = 0;
    player = global.leader;
    
    hue01 = 0;
    hue02 = 0;
    sat01 = 0;
    sat02 = 0;
    
    color01 = 0;
    color02 = 0;
    
    drawstate = hud_draw_idle;
    
    menu_index = 0;
    menu_choices = 0;
    draw_list = -1;
    draw_item = -1;
    
    background_surf = surface_create(view_wview, view_hview);
    surface_set_target(background_surf);
    draw_clear_alpha(c_white, 0);
    surface_reset_target();
    
    text_surf = surface_create(view_wview, view_hview);
    surface_set_target(text_surf);
    draw_clear_alpha(c_white, 0);
    surface_reset_target();
    
    t[0] = 0;

    depth = -1000000
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT MENU VARS

    menu_radius = 80;
    menu_border = 16;
    choice_radius = 40;
    choice_extra_len = 16;
    
    size_fade_multiplier = 6;
    
    top_align_yy = 56;
    bot_align_yy = 56;
    
    column_break = 20;
    
    line_break_dist = 8;
    
    hud_fade_time = 7;
    
    chosen_menu_index = 0;
    main_menu_index = 0;
    item_type = itemtype.weapon;
    
    top_is_drawing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TIMERS &amp; COLORS &amp; BACKGROUND SURFACE

    if _fade01 &gt; 0 { _fade01--; }
    
    if t[0] &lt;= 0
    {
        t[0] = 0;
    }
    else
    {
        t[0]--;
    }
    
    var hue1 = (255 + pulse_mid(0.05, 75, hue01)) mod 255;
    var sat1 = (255 + pulse_mid(0.056, 45, sat01)) mod 255;
    var hue2 = (255 + pulse_mid(0.065, 75, hue02)) mod 255;
    var sat2 = (255 + pulse_mid(0.076, 45, sat02)) mod 255;
    
    color01 = make_colour_hsv(hue1, sat1, 255);
    color02 = make_colour_hsv(hue2, sat2, 255);
    
    // CLEAR BACKGROUND SURFACE
    if surface_exists(background_surf)
    {
        surface_set_target(background_surf);
        draw_clear_alpha(c_white, 0);
        surface_reset_target();
    }
    else
    {
        background_surf = surface_create(view_wview, view_hview);
    }
    
    // CLEAR BACKGROUND SURFACE
    if surface_exists(text_surf)
    {
        surface_set_target(text_surf);
        draw_clear_alpha(c_white, 0);
        surface_reset_target();
    }
    else
    {
        text_surf = surface_create(view_wview, view_hview);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEANUP SURFACES

    surface_free(background_surf);
    surface_free(text_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EXECUTE DRAW STATE

    get_input();
    
    main_menu_index = chosen_menu_index;
    
    // LEADER CHECK
    if !is_undefined(global.leader)
    &amp;&amp; instance_exists(global.leader)
    {
        // EXECUTE DRAW STATE
        script_execute(drawstate);
    }
                
    // DRAW STATS
    hud_draw_stats();
    
    /// INTERACTABLE TEXT

    if global.interactable != noone
    {
        draw_set_color(c_white);
        draw_set_alpha(global.alpha2);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text(global.interactable.text_x, global.interactable.text_y, global.interactable.name_text);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_alpha(1);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STARTED &amp; CONTROLS

    // CONTROLS
    if global.draw_controls == true
    {
        var xalign = 32;
        var yalign = 24;
        var xalign2 = view_wview-32;
        var yalign2 = 24;
        
        player.state = idle_state;
        drawstate = hud_draw_idle;
        
        var alpha_mod = 1//(5) / global.time
        clamp(alpha_mod, 0, 1);
        
        surface_set_target(background_surf);
        draw_set_colour(c_black);
        draw_set_alpha(1);
        draw_rectangle(0, 0, view_wview, view_hview, false);
        draw_set_color(c_white);
        surface_reset_target();
        
        surface_set_target(text_surf);
        
        // DRAW
        draw_set_colour(c_white);
        // DRAW INSTRUCTIONS
        draw_set_font(MONOBIT12);
        draw_set_valign(fa_top);
        draw_set_halign(fa_left);
        draw_set_alpha((global.alpha) * alpha_mod);
        draw_text(xalign,yalign, "dpad L/R : select unit #Y/Square + dpad L/R : select turret #R2 : fire #R1 : menu #L1 : dash #L2 : aim mode # L2 + R2 : deploys turret in aim dir  #B/Cross : interact #Select : 10kr, new squad member #Y/Square + Dpad U : 10kr, new turret # A/Circle + A/Circle + A/Circle : Flee ##+/- : audio volume #R : restart #Esc : quit");
        draw_set_halign(fa_right);
        draw_text(xalign2, yalign2, "#MENU #R1 : open menu #R1 + Right stick : Confirm #R1 + no stick : Back #L1 : unequip #A/Circle or X/Triangle : exit menu");
        draw_set_halign(fa_left);
        draw_set_alpha(1);
        
        surface_reset_target();
    }
    
    if global.started == false
    {
        // START GAME TEXT
        draw_set_alpha(global.alpha2);
        draw_set_halign(fa_center);
        draw_set_font(MONOBIT12);
        draw_text(view_xview+view_wview/2,view_yview+(0.85 * view_hview), "PRESS START");
    }
    
    // WAVE CLEARED?
/*    if global.started == true 
    &amp;&amp; global.cleared == true
    {
        // DRAW
        draw_set_colour(c_white);
        // PRESS START 
        draw_set_alpha(global.alpha2);
        draw_set_halign(fa_center);
        draw_set_font(MONOBIT12);
        draw_text(view_xview+view_wview/2,view_yview+(0.85 * view_hview), "PRESS START");
        // WAVE CLEARED
        draw_set_alpha(global.alpha2);
        draw_set_halign(fa_center);
        draw_set_font(MONOBIT12);
        draw_text(view_xview+view_wview/2,view_yview+(0.1 * view_hview), "WAVE CLEARED");
        draw_text_ext_transformed_colour(view_xview + view_wview / 2, view_yview + (0.65 * view_hview), "WAVE CLEARED", 4, view_wview, 2, 2, 0, color01, color02, color01, color02, global.alpha * (_fade01 / fade_from));
    }*/
        
    // RESET
    draw_set_halign(fa_left);
    draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EPILEPSY
    
    draw_set_alpha(pulse(global.time, 11.94, 0.1, 0.2) * pulse(global.time, 2.91, 0.1, 0.2));
    var inc_spd = 0.01;
    var hue = random(255);
    var tgt_hue = random(255);
    var sat = rnd(50, 25);
    var tgt_sat = rnd(50, 25);
    var rate = random(3);
    var tgt_rate = random(130);
    var i = 0;
    if i &lt;= 0 { tgt_hue = random(255); tgt_sat = rnd(50, 25); tgt_rate = random(3); i += room_speed * rnd(10, 5); }
    if hue != tgt_hue { hue = approach(hue, tgt_hue, inc_spd); }
    if sat != tgt_sat { hue = approach(hue, tgt_hue, inc_spd * 2); }
    rate = approach(rate, tgt_rate, inc_spd * 0.1);
    hue = pulse(global.time, rate, sat, hue);
    sat = pulse(global.time, rate, sat, sat);
    var col = make_color_hsv(hue, sat, 160);
    
//    draw_set_blend_mode_ext(bm_dest_alpha, );
    draw_set_colour(col);
    draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, false);
    draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW RESOURCES

    // ALIGN
    var xalign = view_xview + 40;
    var yalign = view_yview + 12;
    
    var xalign2 = view_xview - 40;
    var yalign2 = view_yview + 12;
        
    draw_set_colour(c_white);
    draw_set_alpha(global.alpha);
    draw_set_font(MONOBIT12);
    
    // DRAW RESOURCE
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_text(xalign, yalign, string(floor(global.r1)) + "kr #" )

    if global.started == true
    &amp;&amp; !is_undefined(global.leader)
    &amp;&amp; instance_exists(global.leader)
    {
        //+ string(global.leader.latest));
        
        // DRAW ABILITY
/*        if global.r_ability != 0
        {
            draw_text_colour(view_xview + view_wview - 40, yalign, "Abilities: " + string(global.r_ability), color01, color02, color01, color02, global.alpha);
        }*/
        // DRAW WAVE COUNT
        draw_set_halign(fa_center);
        draw_set_alpha(global.alpha * 0.75);
        draw_text(view_xview + view_wview * 0.5, yalign, "Wave " + string(global.waves_cleared));
        
        // AUDIO BLIP
        draw_set_colour(c_white);
        draw_set_alpha(global.effects_volume * global.alpha);
        draw_point(xalign2, yalign2);
        
        // RESET
        draw_set_halign(fa_left);
        draw_set_alpha(1);
    }
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW TEXT &amp; BACKGROUND SURFACE

    // background SURFACE
    if surface_exists(background_surf)
    {
        draw_surface_ext(background_surf, view_xview, view_yview, 1, 1, 0, c_white, global.alpha3);
    }
    else
    {
        background_surf = surface_create(view_wview, view_hview);
    }

    // text SURFACE
    if surface_exists(text_surf)
    {
        draw_surface_ext(text_surf, view_xview, view_yview, 1, 1, 0, c_white, 1);
    }
    else
    {
        text_surf = surface_create(view_wview, view_hview);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
