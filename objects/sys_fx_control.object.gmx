<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT FX CONTROL

    // Create a surface the size of the current room
    // You could also create a surface the size of the current view, but I won't get into that
    
    // SHADOWS
    shadow_surf = surface_create(view_wview, view_hview);
    
    // BLOOD
    blood_surf = surface_create(room_width, room_height);
    blood_sub_surf = surface_create(room_width, room_height);
    
    // MARK SUBTRACTION SURFACE
    surface_set_target(blood_sub_surf);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
    
    var grid = global.collision_grid;
    var gridw = ds_grid_width(grid);
    var gridh = ds_grid_height(grid);
    
    for (var i = 1; i &lt; gridw-1; i++)
    {
        for (var j = 1; j &lt; gridh-1; j++)
        {
            if grid[# i-1, j-1] == 1
//            || grid[# i-1, j-1] == mapcode.void
//            || grid[# i-1, j-1] == mapcode.wall
            {
                surface_set_target(blood_sub_surf);
                draw_set_colour(c_white);
                draw_rectangle((i)*CELL, (j)*CELL, (i)*CELL+CELL, (j)*CELL+CELL, false);
                surface_reset_target();
            }
        }
    }
    
    surface_reset_target();
    
    ///INIT PARTICLES
    global.pt_x = pt_create(sfxWpx, 15, 25, 1, 0, 0.0625, 0.175, 0.125, 0);
    global.pt_x2 = pt_create(sfxWpx, 60, 150, 1, 0, 0.0625, 0.175, 0.125, 0);
    global.pt_x3 = pt_create(sfxWpx, 120, 120, 1, 0, 0, 0, 0.5, 0);
    
    global.pt_shot2 = pt_create(sfxWpx, 2, 2, 1, 0, 0, 0, 0.35, 0);
    
    t[0] = 0;
    
    // The following two lines clear the surface
//    surface_set_target(surf);
//    draw_clear_alpha(c_black, 0);
    
    // Reset to application surface
//    surface_reset_target();
    
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAR SHADOWS

    surface_set_target(shadow_surf);
    draw_clear_alpha(c_white, 0);
    surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PROP ACTIVE / DEACTIVE CONTROL

    if t[0] &lt;= 0
    {
        t[0] = 30;
        
        instance_deactivate_object(oProp);
        instance_deactivate_object(par_interactable);
        instance_activate_region(view_xview - CELL * 4, view_yview - CELL * 4, view_xview + view_wview + CELL * 4, view_yview + view_hview + CELL * 4, false)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CLEAN UP

    // SURFACES
    surface_free(blood_surf);
    surface_free(shadow_surf);

    // PARTICLES
    part_system_destroy(global.ps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW BLOOD &amp; SHADOWS

    // DRWA BLOOD SURFACE IF GAME NOT PAUSED
    if !global.paused
    {
        // SURFACE EXISTS?
        if surface_exists(blood_surf)
        {
            draw_surface(blood_surf, 0, 0);
        }
        // CREATE NEW
        else
        {
            blood_surf = surface_create(room_width, room_height);
        }
        
        // SUBTRACTION SURFACE
        if surface_exists(blood_sub_surf)
        {
            surface_set_target(blood_surf);
            draw_set_blend_mode(bm_subtract);
            draw_surface(blood_sub_surf, 0, 0);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
        }
        else
        {
            blood_sub_surf = surface_create(room_width, room_height);
            
            // MARK SUBTRACTION SURFACE
            surface_set_target(blood_sub_surf);
            draw_clear_alpha(c_black, 0);
            surface_reset_target();
            
            var grid = global.collision_grid;
            var gridw = ds_grid_width(grid);
            var gridh = ds_grid_height(grid);
            
            for (var i = 1; i &lt; gridw-1; i++)
            {
                for (var j = 1; j &lt; gridh-1; j++)
                {
                    if grid[# i-1, j-1] == 1
                    {
                        surface_set_target(blood_sub_surf);
                        draw_set_colour(c_white);
                        draw_rectangle((i)*CELL, (j)*CELL, (i)*CELL+CELL, (j)*CELL+CELL, false);
                        surface_reset_target();
                    }
                }
            }
        }
        
        // SHADOW SURFACE
        if surface_exists(shadow_surf)
        {
            draw_surface_ext(shadow_surf, view_xview, view_yview, 1, 1, 0, c_white, 0.2);
        }
        else
        {
            shadow_surf = surface_create(view_wview, view_hview);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
