<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sfxWpx</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT

    t[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVE

    x = host.x;
    y = host.y - 16 - (4 * armor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FLASH &amp; COLOR

    if !instance_exists(host) { instance_destroy(); exit; }
    
    depth = host.depth - 10000;
    
    // COLOR
//    if ds_exists(host.item_map[?itemtype.armor], ds_type_map)

    // IF HAS ARMOR
    if armor == true //host.stats_a[?"armor points"] &gt; 0
    {
        var armax = 0;
        
        // EQUIPPED ARMOR?
        if !is_undefined(host.eq_armor)
        &amp;&amp; host.eq_armor != -1
        {
            armax += host.eq_armor[?"amr_total"];
        }
        // BASE ARMOR ?
        if !is_undefined(host.base_armor)
        {
            armax += host.base_armor[?"amr_total"];
        }
        // HAS ARMOR POINTS?
        if armax &gt; 0
        &amp;&amp; host.stats_a[?"armor points"] &gt; 0
        {
            // VISIBILITY
            visible = true;
            
            // GET ARMOR STATS
            var arnow = host.stats_a[?"armor points"];
            var arp = arnow / armax;
            
            clamp(arp, 0, 1);
            //ease_out_cubic(arp, 0, 1, 1);
            
    /*        var hp_col = make_colour_hsv(0, floor(ease_out_cubic(((1-hpp)*255), 0, 255, 255)), 255);
            var amr_col = make_colour_hsv(110, arp * 100, 255);
            
            var red = lerp(colour_get_red(hp_col), colour_get_red(amr_col), 0.5);
            var blue = lerp(colour_get_blue(hp_col), colour_get_blue(amr_col), 0.5);
            var green = lerp(colour_get_green(hp_col), colour_get_green(amr_col), 0.5);*/
            
            var amr_col = make_colour_hsv(110, arp * 150, 255);
            image_blend = amr_col;
            
            image_alpha = arp;
        }
        else
        {
            // INVISIBLE IF NO ARMOR POINTS
            visible = false;
        }
    }
    
    if !armor
    {
        // HP STATS
        var hpnow = host.stats_a[?"hp"];
        var hpmax = host.stats_a[?"hpmax"];
        var hpp = hpnow / hpmax;
        image_alpha = 0.25 + hpp;
        
        // COLOR MIX BY HEALTH
        image_blend = make_colour_hsv(0, floor(ease_out_cubic(((1-hpp)*255), 0, 255, 255)), 255);
    }
//    image_blend = make_colour_hsv(0, ((1-hpp)*255), 255);
    
    // FLASH IF HP LOW
    if t[0] &lt;= 0
    &amp;&amp; (!armor)
    &amp;&amp; (hpp &lt;= 0.33 || hpnow &lt; 30)
    {
        t[0] = (room_speed * 0.25 * hpp);
        {
            if image_alpha != 1
            {
                image_alpha = 1;
            }
            else
            {
                image_alpha = hpp //ease_out_sine(hpp,0,1,1);
            }
        }
    }
    else if t[0] &gt; 0
    &amp;&amp; (!armor)
    {
        t[0]--;
    }
    else if (!armor)
    {
        image_alpha = 1;
    }
    
//    image_alpha = pulse_mid(0.5 + (9.5 * (1-hpp)), 1-hpp + ease_in_sine(1-hpp, 0, 1, 1), hpp)
    //pulse(global.time, 0.5 + (9.5 * (1 - hpp)), ease_in_out_cubic(1-hpp, 0, 1, 1), hpp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BACKGROUND

    draw_set_alpha(0.8 * ((pulse(global.time, 2, 0.25, 0.65)) + (pulse(global.time, 2.92, 0.25, 0.65))) / 2);
    draw_sprite(sDot_shadow, 0, x, y);
    draw_set_alpha(1);

    draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
