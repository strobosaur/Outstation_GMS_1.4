<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT CONTROLS

    gamepad = ds_map_create();
    
    // LEFT AXIS
    ds_map_add(gamepad, "LSX", 0);
    ds_map_add(gamepad, "LSY", 0);
    ds_map_add(gamepad, "LSamp", 0);
    ds_map_add(gamepad, "LSdir", 0);
    
    // RIGHT AXIS
    ds_map_add(gamepad, "RSX", 0);
    ds_map_add(gamepad, "RSY", 0);
    ds_map_add(gamepad, "RSamp", 0);
    ds_map_add(gamepad, "RSdir", 0);
    
    // PRIMARY BUTTONS
    ds_map_add(gamepad, "GPA", 0);
    ds_map_add(gamepad, "GPA_p", 0);
    ds_map_add(gamepad, "GPA_r", 0);
    
    ds_map_add(gamepad, "GPB", 0);
    ds_map_add(gamepad, "GPB_p", 0);
    ds_map_add(gamepad, "GPB_r", 0);
    
    ds_map_add(gamepad, "GPY", 0);
    ds_map_add(gamepad, "GPY_p", 0);
    ds_map_add(gamepad, "GPY_r", 0);
    
    ds_map_add(gamepad, "GPX", 0);
    ds_map_add(gamepad, "GPX_p", 0);
    ds_map_add(gamepad, "GPX_r", 0);
    
    // D-PAD
    ds_map_add(gamepad, "GPU", 0);
    ds_map_add(gamepad, "GPU_p", 0);
    ds_map_add(gamepad, "GPU_r", 0);
    
    ds_map_add(gamepad, "GPD", 0);
    ds_map_add(gamepad, "GPD_p", 0);
    ds_map_add(gamepad, "GPD_r", 0);
    
    ds_map_add(gamepad, "GPL", 0);
    ds_map_add(gamepad, "GPL_p", 0);
    ds_map_add(gamepad, "GPL_r", 0);
    
    ds_map_add(gamepad, "GPR", 0);
    ds_map_add(gamepad, "GPR_p", 0);
    ds_map_add(gamepad, "GPR_r", 0);
    
    // SHOULDER
    ds_map_add(gamepad, "GPR1", 0);
    ds_map_add(gamepad, "GPR1_p", 0);
    ds_map_add(gamepad, "GPR1_r", 0);
    
    ds_map_add(gamepad, "GPR2", 0);
    ds_map_add(gamepad, "GPR2_p", 0);
    ds_map_add(gamepad, "GPR2_r", 0);
    
    ds_map_add(gamepad, "GPR3", 0);
    ds_map_add(gamepad, "GPR3_p", 0);
    ds_map_add(gamepad, "GPR3_r", 0);
    
    ds_map_add(gamepad, "GPL2", 0);
    ds_map_add(gamepad, "GPL2_p", 0);
    ds_map_add(gamepad, "GPL2_r", 0);
    
    ds_map_add(gamepad, "GPL2", 0);
    ds_map_add(gamepad, "GPL2_p", 0);
    ds_map_add(gamepad, "GPL2_r", 0);
    
    ds_map_add(gamepad, "GPL3", 0);
    ds_map_add(gamepad, "GPL3_p", 0);
    ds_map_add(gamepad, "GPL3_r", 0);
    
    // OTHER
    ds_map_add(gamepad, "GPST", 0);
    ds_map_add(gamepad, "GPST_p", 0);
    ds_map_add(gamepad, "GPST_r", 0);
    
    ds_map_add(gamepad, "GPSL", 0);
    ds_map_add(gamepad, "GPSL_p", 0);
    ds_map_add(gamepad, "GPSL_r", 0);
    
    ds_map_add(gamepad, "GPPS", 0);
    ds_map_add(gamepad, "GPPS_p", 0);
    ds_map_add(gamepad, "GPPS_r", 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE CONTROLS
        
        // ================================
        // LEFT STICK AXIS
        
        gamepad[?"LSX"] = gamepad_axis_value(0, gp_axislh); // LS X AXIS
        LSX = gamepad[?"LSX"];
        
        gamepad[?"LSY"] = gamepad_axis_value(0, gp_axislv); // LS Y AXIS
        LSY = gamepad[?"LSY"];
        
        // LEFT DEADZONE
        left_deadzone = 0.35;
        
        // CUSTOM LEFT DEADZONE
        if point_distance(0,0,LSX,LSY) &gt; left_deadzone
        {
            gamepad[?"LSamp"] = clamp(max(0,(point_distance(0,0, gamepad[?"LSX"],gamepad[?"LSY"])-left_deadzone)/(1-left_deadzone)),0,1);
        }
        else
        {
            gamepad[?"LSamp"] = 0;
        }
        
        RSamp = gamepad[?"LSamp"];
        
        gamepad[?"LSdir"] = point_direction(0, 0, LSX, LSY);
        LSdir = gamepad[?"LSdir"];
        
        // ================================
        // RIGHT STICK AXIS
        
        gamepad[?"RSX"] = gamepad_axis_value(0, gp_axisrh); // LS X AXIS
        RSX = gamepad[?"RSX"];
        
        gamepad[?"RSY"] = gamepad_axis_value(0, gp_axisrv); // LS Y AXIS
        RSY = gamepad[?"RSY"];
        
        // LEFT DEADZONE
        right_deadzone = 0.15;
        
        // CUSTOM LEFT DEADZONE
        if point_distance(0,0,RSX,RSY) &gt; left_deadzone
        {
            gamepad[?"RSamp"] = clamp(max(0,(point_distance(0,0, gamepad[?"RSX"],gamepad[?"RSY"])-left_deadzone)/(1-left_deadzone)),0,1);
        }
        else
        {
            gamepad[?"RSamp"] = 0;
        }
        
        RSamp = gamepad[?"RSamp"];
        
        gamepad[?"RSdir"] = point_direction(0, 0, RSX, RSY);
        RSdir = gamepad[?"RSdir"];
        
        // ================================
        // PAD VARIABLES
        
        GPR = gamepad_button_check(0, gp_padr); // PAD RIGHT
        GPR_p = gamepad_button_check_pressed(0, gp_padr); // PAD RIGHT
        GPR_r = gamepad_button_check_released(0, gp_padr); // PAD RIGHT
        
        GPU = gamepad_button_check(0, gp_padu); // PAD UP
        GPU_p = gamepad_button_check_pressed(0, gp_padu); // PAD UP
        GPU_r = gamepad_button_check_released(0, gp_padu); // PAD UP
        
        GPL = gamepad_button_check(0, gp_padl); // PAD LEFT
        GPL_p = gamepad_button_check_pressed(0, gp_padl); // PAD LEFT
        GPL_r = gamepad_button_check_released(0, gp_padl); // PAD LEFT
        
        GPD = gamepad_button_check(0, gp_padd); // PAD DOWN
        GPD_p = gamepad_button_check_pressed(0, gp_padd); // PAD DOWN
        GPD_r = gamepad_button_check_released(0, gp_padd); // PAD DOWN
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
