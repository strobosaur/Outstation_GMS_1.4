<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>hitbox_12</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT BULLET
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEATH
    
    ds_list_destroy(has_hit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVE &amp; HIT CHECK
    
    // DEPTH
    depth = -y;

    // IF NO SHOOTER
    if !instance_exists(shooter)
    {
        shooter = id;
    }
    
    // INREMENTAL MOVE &amp; COLLISION CHECK
    for (var i = 0; i &lt; len; i++)
    {
        // TRAIL
        if random(1) &lt; approach(0, 1, ease_in_sine((traveled + i) / 128, 0, 1, 1)) * 0.5 { part_particles_create(global.ps, x, y, global.pt_x, 1); }
            
        // HIT
        var inst = collision_rectangle(x-(hitbox/2), y-(hitbox/2), x+(hitbox/2), y+(hitbox/2), enemy, false, true);
        if inst != noone
        {
            // CHECK IF ALREADY HAS BEEN HIT
            if ds_list_find_index(has_hit, inst) == -1 
            &amp;&amp; inst.stats_a[?"hp"] &gt; 0
            {
                ds_list_add(has_hit, inst);
                /// DEAL DEATH
            
                // DAMAGE PARAMETERS
                var wp_knock = eq_wpn[? "knock"] + check_bonus_list(attack_modifier_list, "knock", shooter);
                var wp_suppr = eq_wpn[? "suppr"] + check_bonus_list(attack_modifier_list, "suppr", shooter);
                var wp_shock = eq_wpn[? "shock"] + check_bonus_list(attack_modifier_list, "shock", shooter);
                
                var wp_splash = eq_wpn[? "splash"] + check_bonus_list(attack_modifier_list, "splash", shooter);
                var wp_radius = eq_wpn[? "radius"] + check_bonus_list(attack_modifier_list, "radius", shooter);
                var wp_multiplier = eq_wpn[?"multiplier"] + check_bonus_list(attack_modifier_list, "multiplier", shooter)
            
                // DAMAGE
                if instance_exists(shooter)
                {
                    var paingod = shooter;
                } else {
                    var paingod = id;
                }
                
                var ret = 0;
                
                // DO DAMAGE
                if tohit_roll(shooter, inst)
                {
                    // DAMAGE
                    do_damage(hit_damage, paingod, inst);
                    // KNOCKBACK
                    knockback(inst, dir, wp_knock);
                    // HIT FX
                    make_boom(x, y, wp_radius);
                    // BLOOD?
                    spill_blood(x, y, hit_damage, dir);
                    // CRITICAL FX
                    if critical_hit
                    {
                        make_critical_fx(x, y, hit_damage, inst);
                    }
                }
                
                // HAS HIT PENETRATION MAX?
                if ds_list_size(has_hit) &gt;= wp_pen
                {
                    // KNOCKBACK
                    make_shockwave(x, y, wp_radius, enemy, wp_knock*0.5, wp_suppr, wp_shock);
                    // SPLASH?
                    if wp_splash &gt; 0 {splash_damage(x, y, wp_radius, enemy, hit_damage * wp_splash, 0); }
                    instance_destroy();
                    exit;
                }
            }
        }
        
        // IF HITS WALL FIRST
        if (global.bullet_grid[# (x div CELL)-1, (y div CELL)-1] == 1) 
        || (traveled &gt;= range)
        {        
            // DAMAGE PARAMETERS
            var wp_knock = eq_wpn[? "knock"] + check_bonus_list(attack_modifier_list, "knock", shooter);
            var wp_suppr = eq_wpn[? "suppr"] + check_bonus_list(attack_modifier_list, "suppr", shooter);
            var wp_shock = eq_wpn[? "shock"] + check_bonus_list(attack_modifier_list, "shock", shooter);
            
            var wp_splash = eq_wpn[? "splash"] + check_bonus_list(attack_modifier_list, "splash", shooter);
            var wp_radius = eq_wpn[? "radius"] + check_bonus_list(attack_modifier_list, "radius", shooter);
        
            // SPLASH?
            if wp_splash &gt; 0 {splash_damage(x, y, wp_radius, enemy, hit_damage * wp_splash, 0); }
            // KNOCKBACK
            make_shockwave(x, y, wp_radius, enemy, wp_knock*0.5, wp_suppr, wp_shock);
            make_boom(x, y, wp_radius * 0.75) //rnd(14, 3))
            make_dust(x, y, 1, 4, dir, random(0.75))
            
            instance_destroy();
            
            exit;
        }
        
        // MOVE INREMENTALY
        x += lengthdir_x(1, dir);
        y += lengthdir_y(1, dir);
        
        traveled++;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
