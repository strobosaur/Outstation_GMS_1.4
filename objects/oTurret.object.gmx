<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTurret02_gun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT TURRET

    mount = 0;
    dir = random(360);
    todir = dir;
    turnspd = 1.5;
    angle1 = 0;
    angle2 = 0;
    d_dir = 0;
    shots = 0;
    tgtx = 0;
    tgty = 0;
    o_weapon = id;
    chosen_mix = false;
    critical_hit = false;
    
    fire_angle = 0;
    
    state = turret_new_state;
    
    // TIMER INIT
/*    for (var i = 0; i &lt; timer.stop; i++)
    {
        timers[i] = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// STAY IN PLACE
    
    x = mount.x;
    y = mount.y-4;
    
//    chosen_mix = mount.chosen_mix;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATER

    // FACE
    face = face4(dir);
    // STATE EXECUTE
    update_timers();
    script_execute(state);

    depth = mount.depth - 4;
    image_angle = dir;
    // RELOAD COUNTER
    if timers[timer.wp01] &lt;= 0
    {
        stats_a[?"shots fired"] = 0;
    }
//    timer_ends();
    
    fire_angle = mount.fire_angle;
    d_dir = mount.d_dir;
    eq_wpn = mount.eq_wpn;
    
    // DIR
    if (dir != todir) 
    &amp;&amp; (global.leader != id)
    {
        dir += turn_to(dir, todir, turnspd);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SHADERS ETC

    // HIT FLASH
    if timers[timer.flash] &gt; 0
    {
        shader_set(shMix);
        var mix_u = shader_get_uniform(shMix, "u_vMix");
        var mix = 0.5 * (timers[timer.flash] / 45);
        shader_set_uniform_f(mix_u, mix);
        draw_self();
        shader_reset();
    }
    else
    {
        draw_self();
    }
    
    // MOUNT CHOSEN MIX
    if mount.chosen_mix == true
    {
        shader_set(shMix);
        var mix_u = shader_get_uniform(shMix, "u_vMix");
        var mix = mount.chosen_mix * 0.5;
        shader_set_uniform_f(mix_u, mix);
        draw_self();
        shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
