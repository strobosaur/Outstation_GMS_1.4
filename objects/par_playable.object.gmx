<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_friendly</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT PLAYABLE

    event_inherited();

    // TRAIT LIST
    trait_list = ds_list_create();
    eq_skill_list = ds_list_create();
    skill_switch = false;
    
    // LEVEL UP POOL
    
    // LEVEL UP LIST
    base_armor = generate_item(itemtype.armor, "no armor", 0, 0, 0);
    
    // SKILLS &amp; MAP
    skill_map = ds_map_create();
    
    ds_map_add(skill_map, "skill I", -1);
    ds_map_add(skill_map, "skill II", -1);
    ds_map_add(skill_map, "skill III", -1);
    
    // SKILLS
    skill_slot_list = ds_list_create();
    
    ds_list_add(skill_slot_list, "skill I");
    ds_list_add(skill_slot_list, "skill II");
    ds_list_add(skill_slot_list, "skill III");
        
    // MENU INDEX / STICK BLOCK
    equip_menu_index = -1;
    RS_menu_block = false;
    
    fleeing = false;
    playable = true;
    
    // TEAM MEMBER LIST &amp; ACTIVE

    // MAKE LEADER ACTIVE
    global.team_active = ds_list_find_index(global.team, global.leader);
    ds_list_sort(global.team, true);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEATH ETC
    
    // BASE ARMOR
    ds_map_destroy(base_armor);

    event_inherited();
    
    // DROID REMOVE
    {
        ds_list_delete(global.droids, ds_list_find_index(global.droids, id));
        ds_list_sort(global.droids, true);
    }
    
    // TURRET REMOVE
    {
        ds_list_delete(global.turrets, ds_list_find_index(global.turrets, id));
        ds_list_sort(global.turrets, true);
    }
    
    // SKILL MAP
    ds_map_destroy(skill_map);
    
    // SKILL LOG
    if !is_undefined(skill_log)
    {
        ds_map_destroy(skill_log);
    }
    
    // BONUS LISTS
    ds_list_destroy(trait_list);
    ds_list_destroy(skill_slot_list);
    ds_list_destroy(eq_skill_list);

    // DROP INVENTORY STUFF
    for (var i = 0; i &lt; eqp.stop; i++)
    {
        if item_map[? i] != -1
        {
            var item = ds_map_find_value(item_map, i);
            if item[? "itemtype"] != -1 &amp;&amp; enemy == par_enemy
            {
                var pos = random_radius(x, y, 8);
                make_pickup(pos[0], pos[1], item);
            }
        }
    }
    
    // NEW LEADER / DEATH
    if global.leader == id 
    { 
        // GLOBAL TEAM NOT EMPTY
        if !ds_list_empty(global.team)
        {
            if !ds_list_empty(global.droids)
            {
                // DROID
                global.team_active = ds_list_find_value(global.droids, 0);
            }
            else
            {
                // TURRET
                global.team_active = ds_list_find_value(global.turrets, 0);
            }
        }
        // GAME OVER
        else
        {
            game_restart();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// XP, SKILLS, REGEN &amp; INHERIT

    event_inherited();
    
    // LEVEL UP CHECK
    if timers[timer.level_up] &lt;= 0
    {
        timers[timer.level_up] = room_speed;
        
        // DO LEVEL UP?
        if stats_a[?"xp progress"] &gt;= stats_a[?"xp next"]
        {
            // RESET SKILL SWITCH
            skill_switch = false;
            
            // DO XP STATS
            stats_a[?"level"]++;
            stats_a[?"xp progress"] -= stats_a[?"xp next"]
            stats_a[?"xp next"] = ((stats_a[?"xp next"] * (1.45 + (stats_a[?"level"] * 0.15))) div 25) * 25;
            
            //stats_a[?"hpmax"] += round(stats_a[?"health"] * random_range(2,3));
            
            do_level_up(active_skill[?"name"], true);
            
            stats_a[?"hp"] = stats_a[?"hpmax"];
            stats_a[?"regen"] += 0.025;
            //stats_a[?"base th_plus"]++;
            
            timers[timer.chosen01] = room_speed * 1
        
            // SOUND EFFECT
            audio_play_sound(sndPowerup01d, 20, false);
        }
    }
    
    // REGEN TIMER
    if timers[timer.regen] &lt;= 0
    {
        // FAST REGEN
        stats_a[?"hp"] = approach(stats_a[?"hp"], stats_a[?"hpmax"], ((stats_a[?"regen"]*2) / room_speed));
    }
    else
    {
        // SLOW REGEN
        stats_a[?"hp"] = approach(stats_a[?"hp"], stats_a[?"hpmax"], stats_a[?"regen"]/room_speed);
    }
    
    if timers[timer.armor_regen] &lt;= 0
    {
        var amrmax = 0;
        // GET ARMOR POINTS
        if ds_exists(item_map[? itemtype.armor], ds_type_map)
        {
            var armor = item_map[?itemtype.armor];
            amrmax += armor[?"amr_total"];
        }
        
        amrmax += base_armor[?"amr_total"];
        // DO FAST ARMOR REGEN
        if floor(amrmax) &gt;= 1
        {
            stats_a[?"armor points"] = approach(stats_a[?"armor points"], round(amrmax), (stats_a[?"armor regen"] / room_speed));
        }
        
        // IF TOO HIGH, 
        if stats_a[?"armor points"] &gt; amrmax { stats_a[?"armor points"] = amrmax; }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
