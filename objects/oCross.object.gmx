<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCross01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT CROSS

    player = global.leader;

    midx = x;
    midy = y;
    
    hspd = 0;
    vspd = 0;
    len = 0;
    dir = 0;
    spd = 0.175;
    
    // MAKE TARGET MAP
    target = ds_map_create();
    
    target[? "x"] = 0;
    target[? "y"] = 0;
    
    target[? "ls spot x"] = 0;
    target[? "ls spot y"] = 0;
    target[? "ls len"] = 140;
    target[? "ls close"] = 1;
    
    target[? "rs spot x"] = 0;
    target[? "rs spot y"] = 0;
    target[? "rs len"] = 160;
    target[? "rs close"] = 1;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVE TO SPOT

    // LEADER EXISTS?
    if instance_exists(global.leader)
    &amp;&amp; global.leader != noone
    {
        get_input();
        
        image_alpha = (pulse(global.time, 6.5, 0.25, 0.85)) * min(1, max(0, ((point_distance(x, y, player.x, player.y) - 32) / 96)));
        
        player = global.leader;
         
        // IF PLAYER IS AIMING
        if player.state == player_aiming
        {   
            var wpn_range = player.eq_wpn[?"range"] + check_bonus_list(player.attack_modifier_list, "range", player);
            target[?"x"] = player.x + lengthdir_x(wpn_range, player.dir);
            target[?"y"] = player.y + lengthdir_y(wpn_range, player.dir);
        }
        else
        {
            // RIGHT STICK
            if RSamp &gt; 0
            {
                target[?"rs spot x"] = lerp(global.leader.x, global.leader.x + lengthdir_x(target[?"rs len"]*RSamp, RSdir), target[?"rs close"]);
                target[?"rs spot y"] = lerp(global.leader.y, global.leader.y + lengthdir_y(target[?"rs len"]*RSamp, RSdir), target[?"rs close"]);
            }
            else
            {
                image_alpha = 0;
                target[?"rs spot x"] = global.leader.x;
                target[?"rs spot y"] = global.leader.y;
            }
            
            // CENTER ON LEADER IF NO STICK ACTIVITY
            if RSamp == 0
            &amp;&amp; LSamp == 0
            {
                target[?"x"] = global.leader.x;
                target[?"y"] = global.leader.y;
            }
            else
            {
                // STICK ACTIVITY, LERP BETWEEN SPOTS
                target[?"x"] = target[?"rs spot x"];
                target[?"y"] = target[?"rs spot y"];
            }
        }
    
        // VISIBILITY
        if //player.state == player_aiming 
         player.fleeing
        || player.eq_wpn[?"melee"] == true
        || player.state == player_equip_state
        || player.state == player_choose_item
        {
            image_alpha = 0;
        }
    }
    
    // MOVE CROSS
    if point_distance(x, y, target[?"x"], target[?"y"]) &gt; 2
    {
        x = round(lerp(x, target[? "x"], spd)); 
        y = round(lerp(y, target[? "y"], spd)); 
    }
    else
    {
        x = round(target[?"x"]);
        y = round(target[?"y"]);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT &amp; SHIT
    
/*    get_input();
    
    // IF PLAYER EXISTS
    if !is_undefined(global.leader) &amp;&amp; instance_exists(global.leader)
    {
        player = global.leader; 
    
        image_alpha = (pulse(global.time, 6.5, 0.25, 0.85)) * min(1, max(0, ((point_distance(x, y, player.x, player.y) - 32) / 96)));
        
        // IF PLAYER IS AIMING
        if player.state == player_aiming
        {
            var wpn_range = player.eq_wpn[?"range"] + check_bonus_list(player.bonus_list, "range", player);
            x = player.x + lengthdir_x(wpn_range, player.dir);
            y = player.y + lengthdir_y(wpn_range, player.dir);
        }
        // IF NOT AIMING
        else
        {
            // RIGHT STICK ENGAGED?
            if RSamp != 0
            {
                len = (RSamp * 16); 
                
                hspd = lengthdir_x(len, RSdir);
                vspd = lengthdir_y(len, RSdir);
            }
            
            if RSamp == 0
            {
                image_alpha = 0;
                len = approach(len, max(0.1, point_distance(x, y, player.x, player.y) / 15), 0.05);
                dir = point_direction(x, y, player.x, player.y);
                
                hspd = lengthdir_x(len, dir);
                vspd = lengthdir_y(len, dir);
            }
            
            // MOVEMENT
            var len2 = max(0, (point_distance(x, y, player.x, player.y) - 64) / 8);
            var dir2 = point_direction(x, y, player.x, player.y);
            var hspd2 = lengthdir_x(len2, dir2);
            var vspd2 = lengthdir_y(len2, dir2);
                
            x += (player.hspd + hspd + hspd2)
            y += (player.vspd + vspd + vspd2)
        }
    
        // VISIBILITY
        if player.state == player_aiming 
        || player.fleeing
        || player.eq_wpn[?"melee"] == true
        {
            image_alpha = 0;
        }
    }
    // NO PLAYER
    else
    {
        image_alpha = 0;
        x = camera.x;
        y = camera.y;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SHADOW

    // IF PLAYER EXISTS
    if instance_exists(player)
    &amp;&amp; player != noone
    {
//        if (player.state != player_aiming)
        {
            draw_set_alpha((image_alpha * 0.2) * ((pulse(global.time, 2, 0.7, 0.65) + pulse(global.time, 3.76, 0.7, 0.65)) / 2));
            draw_sprite(sCross_shadow, 0, x, y);
            draw_set_alpha(1);
            
            draw_self();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
