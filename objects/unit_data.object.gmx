<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT
    
    // WEAPON &amp; CLASS DATA
    weapons = weapon_data();
    armors = armor_data();
    classes = class_data();
//    global.bonus_book = level_up_data();
    creepwpn = creep_weapon_data();
    
    // ITEM BONUS
    item_bonus_pool = ds_list_create();
    init_item_bonus_pool(item_bonus_pool);
    
    unarmed = weapons[? "unarmed"];
    unarmed[? "name"] = "unarmed";
    
    no_armor = armors[? "no armor"];
    no_armor[? "name"] = "no armor";
    
    // SKILL LIST
    skill_list = ds_list_create();
    
    // COMBAT
    var combat = ds_map_create();
    
    var list = ds_list_create()
    ds_list_add(list, "hp ++", "th +", "dmg %");    
    ds_map_add(combat, "name", "combat");
    ds_map_add(combat, "text", list);
    
    // MELEE
    var melee = ds_map_create();
    
    list = ds_list_create();
    ds_list_add(list, "hp ++", "th +", "dmg +", "ac %");
    ds_map_add(melee, "name", "melee");
    ds_map_add(melee, "text", list);
    
    // OVERKILL
    var overkill = ds_map_create();
    
    list = ds_list_create();
    ds_list_add(list, "hp +", "crt +", "th +", "dmg %");
    
    ds_map_add(overkill, "name", "overkill");
    ds_map_add(overkill, "text", list);
    
    // DEFENSE
    var defense = ds_map_create();
    
    list = ds_list_create();
    ds_list_add(list, "hp +++", "ac +", "th %", "amr %", "reg %");
    
    ds_map_add(defense, "name", "defense");
    ds_map_add(defense, "text", list);
    
    // BLOODLUST
    var bloodlust = ds_map_create();
    
    list = ds_list_create();
    ds_list_add(list, "hp +", "th +", "dmg +", "crt %");
    
    ds_map_add(bloodlust, "name", "bloodlust");
    ds_map_add(bloodlust, "text", list);
    
    // ADD TO LIST
    ds_list_add(skill_list, combat);
    ds_list_add(skill_list, melee);
    ds_list_add(skill_list, defense);
    ds_list_add(skill_list, overkill);
    ds_list_add(skill_list, bloodlust);
    
//    global.wpn = weapons;
    global.menu_stats[0, 0] = 0;

    // ALLIED LIST
    active = 0;
    playable = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT SPRITES

    sprite_map = ds_map_create();
    
    // SPRITES
    var sprite = 0;
    
    // DROID === === === === === === === === === ===
    sprite[RIGHT, IDLE] = sDroid02_idle_r;
    sprite[UP, IDLE] = sDroid02_idle_u;
    sprite[LEFT, IDLE] = sDroid02_idle_l;
    sprite[DOWN, IDLE] = sDroid02_idle_d;
    
    sprite[RIGHT, MOVE] = sDroid02_walk_r;
    sprite[UP, MOVE] = sDroid02_walk_u;
    sprite[LEFT, MOVE] = sDroid02_walk_l;
    sprite[DOWN, MOVE] = sDroid02_walk_d;
    
    sprite[RIGHT, FIGHT] = sDroid02_idle_r;
    sprite[UP, FIGHT] = sDroid02_idle_u;
    sprite[LEFT, FIGHT] = sDroid02_idle_l;
    sprite[DOWN, FIGHT] = sDroid02_idle_d;
    
    ds_map_add(sprite_map, "droid", sprite);
    
    // GLAND === === === === === === === === ===
    sprite = array_create(0);
    
    sprite[RIGHT, IDLE] = sGland;
    sprite[UP, IDLE] = sGland;
    sprite[LEFT, IDLE] = sGland;
    sprite[DOWN, IDLE] = sGland;
    
    sprite[RIGHT, MOVE] = sGland;
    sprite[UP, MOVE] = sGland;
    sprite[LEFT, MOVE] = sGland;
    sprite[DOWN, MOVE] = sGland;
    
    sprite[RIGHT, FIGHT] = sGland;
    sprite[UP, FIGHT] = sGland;
    sprite[LEFT, FIGHT] = sGland;
    sprite[DOWN, FIGHT] = sGland;
    
    ds_map_add(sprite_map, "gland", sprite);
        
    // SHELL === === === === === === === === ===
    sprite = array_create(0);
    
    sprite[RIGHT, IDLE] = sShell01;
    sprite[UP, IDLE] = sShell01;
    sprite[LEFT, IDLE] = sShell01;
    sprite[DOWN, IDLE] = sShell01;
    
    sprite[RIGHT, MOVE] = sShell01;
    sprite[UP, MOVE] = sShell01;
    sprite[LEFT, MOVE] = sShell01;
    sprite[DOWN, MOVE] = sShell01;
    
    sprite[RIGHT, FIGHT] = sShell01;
    sprite[UP, FIGHT] = sShell01;
    sprite[LEFT, FIGHT] = sShell01;
    sprite[DOWN, FIGHT] = sShell01;
    
    ds_map_add(sprite_map, "shell", sprite);
    
    // GERMINITE === === === === === === === === ===
    sprite = array_create(0);
    
    sprite[RIGHT, IDLE] = sGerminite_d_idle;
    sprite[UP, IDLE] = sGerminite_u_idle;
    sprite[LEFT, IDLE] = sGerminite_d_idle;
    sprite[DOWN, IDLE] = sGerminite_d_idle;
    
    sprite[RIGHT, MOVE] = sGerminite_d;
    sprite[UP, MOVE] = sGerminite_u;
    sprite[LEFT, MOVE] = sGerminite_d;
    sprite[DOWN, MOVE] = sGerminite_d;
    
    sprite[RIGHT, FIGHT] = sGerminite_d;
    sprite[UP, FIGHT] = sGerminite_u;
    sprite[LEFT, FIGHT] = sGerminite_d;
    sprite[DOWN, FIGHT] = sGerminite_d;
    
    ds_map_add(sprite_map, "germinite", sprite);
    
    // CRAYBEAST === === === === === === === === ===
    sprite = array_create(0);
    
    sprite[RIGHT, IDLE] = sCraybeast_d_idle;
    sprite[UP, IDLE] = sCraybeast_u_idle;
    sprite[LEFT, IDLE] = sCraybeast_d_idle;
    sprite[DOWN, IDLE] = sCraybeast_d_idle;
    
    sprite[RIGHT, MOVE] = sCraybeast_d;
    sprite[UP, MOVE] = sCraybeast_u;
    sprite[LEFT, MOVE] = sCraybeast_d;
    sprite[DOWN, MOVE] = sCraybeast_d;
    
    sprite[RIGHT, FIGHT] = sCraybeast_d;
    sprite[UP, FIGHT] = sCraybeast_d;
    sprite[LEFT, FIGHT] = sCraybeast_d;
    sprite[DOWN, FIGHT] = sCraybeast_d;
    
    ds_map_add(sprite_map, "craybeast", sprite);
    
    // MOUNT === === === === === === === === === === === ===
    sprite = array_create(0);
    
    sprite[RIGHT, IDLE] = sprMount03;
    sprite[UP, IDLE] = sprMount03;
    sprite[LEFT, IDLE] = sprMount03;
    sprite[DOWN, IDLE] = sprMount03;
    
    sprite[RIGHT, MOVE] = sprMount03;
    sprite[UP, MOVE] = sprMount03;
    sprite[LEFT, MOVE] = sprMount03;
    sprite[DOWN, MOVE] = sprMount03;
    
    sprite[RIGHT, FIGHT] = sprMount03b_deployed;
    sprite[UP, FIGHT] = sprMount03b_deployed;
    sprite[LEFT, FIGHT] = sprMount03b_deployed;
    sprite[DOWN, FIGHT] = sprMount03b_deployed;
    
    ds_map_add(sprite_map, "mount", sprite);
    
    // SPRITE DATA WEAPONS
    for (var i = 0; i &lt; wpspr.stop; i++)
    {
        // BLADE
        if i == wpspr.blade
        {
            blade[RIGHT, IDLE] = sSword02_r;
            blade[UP, IDLE] = sSword02_u;
            blade[LEFT, IDLE] = sSword02_l;
            blade[DOWN, IDLE] = sSword02_d;
            
            blade[RIGHT, MOVE] = sSword02_r;
            blade[UP, MOVE] = sSword02_u;
            blade[LEFT, MOVE] = sSword02_l;
            blade[DOWN, MOVE] = sSword02_d;
            
            blade[RIGHT, FIGHT] = sSword02_r_atk3;
            blade[UP, FIGHT] = sSword02_r_atk3;
            blade[LEFT, FIGHT] = sSword02_l_atk3;
            blade[DOWN, FIGHT] = sSword02_r_atk3;
            
            wspr[wpspr.blade] = blade;
        }    
        // POWERFIST
        if i == wpspr.powerfist
        {
            fist[RIGHT, IDLE] = sPowerfist01_r;
            fist[UP, IDLE] = sPowerfist01_u;
            fist[LEFT, IDLE] = sPowerfist01_l;
            fist[DOWN, IDLE] = sPowerfist01_r;
            
            fist[RIGHT, MOVE] = sPowerfist01_r;
            fist[UP, MOVE] = sPowerfist01_u;
            fist[LEFT, MOVE] = sPowerfist01_l;
            fist[DOWN, MOVE] = sPowerfist01_r;
            
            fist[RIGHT, FIGHT] = sPowerfist01_l_atk;
            fist[UP, FIGHT] = sPowerfist01_l_atk;
            fist[LEFT, FIGHT] = sPowerfist01_l_atk;
            fist[DOWN, FIGHT] = sPowerfist01_l_atk;
            
            wspr[wpspr.powerfist] = fist;
        }
        // RIFLE
        if i == wpspr.rifle
        {
            rifle[RIGHT, IDLE] = sGun03_r;
            rifle[UP, IDLE] = sGun03_u;
            rifle[LEFT, IDLE] = sGun03_l;
            rifle[DOWN, IDLE] = sGun03_d;
            
            rifle[RIGHT, MOVE] = sGun03_r;
            rifle[UP, MOVE] = sGun03_u;
            rifle[LEFT, MOVE] = sGun03_l;
            rifle[DOWN, MOVE] = sGun03_d;
            
            rifle[RIGHT, FIGHT] = sGun03_r_atk;
            rifle[UP, FIGHT] = sGun03_u_atk;
            rifle[LEFT, FIGHT] = sGun03_l_atk;
            rifle[DOWN, FIGHT] = sGun03_d_atk;
            
            wspr[wpspr.rifle] = rifle;
        }
        // UNARMED
        if i == wpspr.unarmed
        {
            unarmed[RIGHT, IDLE] = sHands_lr;
            unarmed[UP, IDLE] = sHands_lr;
            unarmed[LEFT, IDLE] = sHands_lr;
            unarmed[DOWN, IDLE] = sHands_d;
            
            unarmed[RIGHT, MOVE] = sHands_lr;
            unarmed[UP, MOVE] = sHands_lr;
            unarmed[LEFT, MOVE] = sHands_lr;
            unarmed[DOWN, MOVE] = sHands_d;
            
            unarmed[RIGHT, FIGHT] = sHands_lr;
            unarmed[UP, FIGHT] = sHands_lr;
            unarmed[LEFT, FIGHT] = sHands_lr;
            unarmed[DOWN, FIGHT] = sHands_d;
            
            wspr[wpspr.unarmed] = unarmed;
        }
    }
    // MAKE GLOBAL SPRITE ARRAY
    global.wspr = wspr;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ITEM LOL

    // WEAPONS
/*    to_inventory(generate_item(itemtype.weapon, "powerfist", -1));
    to_inventory(generate_item(itemtype.turret, choose("gun post"), -1));
    to_inventory(generate_item(itemtype.turret, choose("auto cannon"), -1));
    to_inventory(generate_item(itemtype.turret, choose("turret"), -1));
    to_inventory(generate_item(itemtype.turret, choose("f. grenade"), -1));
    to_inventory(generate_item(itemtype.implant1, "implant", 5));
    to_inventory(generate_item(itemtype.implant1, "implant", 4));
    to_inventory(generate_item(itemtype.implant1, "implant", 3));
    to_inventory(generate_item(itemtype.weapon, "machinegun", -1));
    to_inventory(generate_item(itemtype.weapon, "rifle", -1));
    to_inventory(generate_item(itemtype.weapon, "powerfist", -1));
    to_inventory(generate_item(itemtype.weapon, "blade", -1));
    to_inventory(generate_item(itemtype.weapon, "shotgun", -1));
    to_inventory(generate_item(itemtype.weapon, "g. launcher", -1));
    to_inventory(generate_item(itemtype.weapon, "blaster", -1));

/*    to_inventory(generate_item(itemtype.weapon, "blaster", -1));
    to_inventory(generate_item(itemtype.weapon, "machinegun", -1));
    to_inventory(generate_item(itemtype.weapon, "rifle", -1));
    to_inventory(generate_item(itemtype.weapon, "powerfist", -1));
    to_inventory(generate_item(itemtype.weapon, "blade", -1));
    to_inventory(generate_item(itemtype.weapon, "shotgun", -1));
    to_inventory(generate_item(itemtype.weapon, "g. launcher", -1));

    // ARMORS
    to_inventory(generate_item(itemtype.armor, choose("kevlar", "type I", "type II"), -1));
    to_inventory(generate_item(itemtype.armor, choose("kevlar", "type I", "type II"), -1));
    to_inventory(generate_item(itemtype.armor, choose("kevlar", "type I", "type II"), -1));
    
    // TURRETS
    to_inventory(generate_item(itemtype.turret, choose("turret"), -1));
    to_inventory(generate_item(itemtype.turret, choose("gun post"), -1));
    to_inventory(generate_item(itemtype.turret, choose("auto cannon"), -1));
    to_inventory(generate_item(itemtype.turret, choose("c. grenade"), -1));
    to_inventory(generate_item(itemtype.turret, choose("anti tank"), -1));
    to_inventory(generate_item(itemtype.turret, choose("f. grenade"), -1));
    
    // IMPLANTS
    to_inventory(generate_item(itemtype.implant, "implant", -1));
    to_inventory(generate_item(itemtype.implant, "implant", -1));
    to_inventory(generate_item(itemtype.implant, "implant", -1));
    to_inventory(generate_item(itemtype.implant, "implant", -1));
    to_inventory(generate_item(itemtype.implant, "implant", -1));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT SKILL BONUS ARRAYS
        
    melee_base = make_bonus_array(statstype.stats_w, "atkspd", "melee base : spd+", operation.divide, 0.15, 0, wpntype.allw);
    bloodlust_base = make_bonus_array(statstype.stats_w, "radius", "bloodlust base : rad+", operation.add, 16, 0, wpntype.allw);
    overkill_base = make_bonus_array(statstype.stats_w, "penetration", "overkill base : pen+", operation.add, 1, 0, wpntype.allw);
    defense_base = make_bonus_array(statstype.stats_a, "regen", "defense base : reg+", operation.add, 0.1, 0, wpntype.allw);

    var bonus = 0;
        
    // COMBAT I
    combat1 = ds_map_create()
    
    ds_map_add(combat1, "name", "combat I");
    array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_w, "radius", "radius +1", operation.add, 1, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(combat1, "active list", array_list);
    
    array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_a, "move speed", "move +15%", operation.add, 0.15, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_a, "regen", "regen +0.15", operation.add, 0.15, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(combat1, "passive list", array_list);
        
    // DEFENSE I
    def1_reg = ds_map_create()
    
    ds_map_add(def1_reg, "name", "defense I");
    var array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_a, "regen", "reg +0.25", operation.add, 0.25, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_amr, "amr_total", "amr +25", operation.add, 25, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(def1_reg, "passive list", array_list);
    
    array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_w, "multiplier", "crt x +1", operation.add, 1, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(def1_reg, "active list", array_list);
    
        
    // MELEE I
    melee1 = ds_map_create()
    
    ds_map_add(melee1, "name", "melee I");
    array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_w, "range", "rng +25", operation.add, 0.25, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_w, "splash", "splash +15%", operation.add, 0.15, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(melee1, "active list", array_list);
    
    array_list = ds_list_create();
    
    ds_map_add(melee1, "passive list", array_list);
        
    // OVERKILL I
    overkill1 = ds_map_create()
    
    ds_map_add(overkill1, "name", "overkill I");
    array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_w, "d_plus", "dmg +1", operation.add, 0.25, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_w, "knock", "knockb. +20%", operation.multiply, 0.20, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_w, "atkspd", "a. spd. +10%", operation.multiply, 0.10, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(overkill1, "active list", array_list);
    
    array_list = ds_list_create();
    
    ds_map_add(overkill1, "passive list", array_list);
        
    // BLOODLUST I
    bloodlust1 = ds_map_create()
    
    ds_map_add(bloodlust1, "name", "bloodlust I");
    array_list = ds_list_create();
    bonus = make_bonus_array(statstype.stats_w, "shots", "shots +1", operation.add, 1, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_w, "th_plus", "th +2", operation.add, 2, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    bonus = make_bonus_array(statstype.stats_w, "crit", "crt +1", operation.add, 2, 0, wpntype.allw);
    ds_list_add(array_list, bonus);
    
    ds_map_add(bloodlust1, "active list", array_list);
    
    array_list = ds_list_create();
    
    ds_map_add(bloodlust1, "passive list", array_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DS CLEANUP

    var a, b, c, d = 0;
    
    a = ds_map_find_first(weapons);
    while !ds_map_empty(weapons)
    {
        b = ds_map_find_next(weapons, a);
        ds_map_delete(weapons, a);
        a = b;
    }
    
    c = ds_map_find_first(classes);
    while !ds_map_empty(classes)
    {
        d = ds_map_find_next(classes, c);
        ds_map_delete(classes, a);
        c = d;
    }
    
    c = ds_map_find_first(armors);
    while !ds_map_empty(armors)
    {
        d = ds_map_find_next(armors, c);
        ds_map_delete(armors, a);
        c = d;
    }
    
    c = ds_map_find_first(global.bonus_book);
    while !ds_map_empty(global.bonus_book)
    {
        d = ds_map_find_next(global.bonus_book, c);
        ds_map_delete(global.bonus_book, a);
        c = d;
    }
    
    // MAPS
    ds_map_destroy(weapons);
    ds_map_destroy(classes);
    ds_map_destroy(armors);
    ds_map_destroy(sprite_map);
    ds_map_destroy(global.bonus_book);
    
    // LISTS
    ds_list_destroy(item_bonus_pool);
    ds_list_destroy(skill_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHANGE PLAYER

/*    get_input();
    
    // NOT PAUSED
    if global.paused == false
    {
        // BUTTONS PUSHED
        if !ds_list_empty(global.team) &amp;&amp; !global.paused
        {
            // DROID SWITCH ================================
            if (GPR_p || GPL_p) &amp;&amp; !GPY
            {
                // OLD LEADER
                var prev = global.leader;
                
                // CYCLE MEMBERS
                var size = ds_list_size(global.team)-1;
                
                global.team_active = (global.team_active + (GPR_p - GPL_p)) mod (size + 1);
                if global.team_active &lt; 0 { global.team_active = size; }
                
                // CHECK IF SAME
                var new_guy = ds_list_find_value(global.team, global.team_active);
                // MAKE CHOICE
                if new_guy != prev
                {
                    // GIVE LEADER ROLE
                    global.leader = new_guy;
                    // PLAY SOUND
                    audio_play_sound(sndBwop01, 10, false);
                    
                    with global.leader
                    {
                        timers[timer.chosen01] = room_speed * 0.75
                        cross = oCross;
                        oCross.player = id;
                        state = new_state;
                    }
                    
                    // THAT OTHER GUY
                    with prev
                    {
                        timers[timer.chosen01] = 0;
                        cross = noone;
                        state = new_state;
                    }
                }
            }
            
            // SWITCH TO TURRET ====================================
            if ((GPY &amp;&amp; GPR_p) || (GPY &amp;&amp; GPL_p)) &amp;&amp; !ds_list_empty(global.turrets)
            {
                // OLD LEADER
                var prev = global.leader;
                
                // CYCLE MEMBERS
                var size = ds_list_size(global.turrets)-1;
                
                global.turret_active = (global.turret_active + (GPR_p - GPL_p)) mod (size + 1);
                if global.turret_active &lt; 0 { global.turret_active = size; }
                
                // MAKE CHOICE
                var new_guy = ds_list_find_value(global.turrets, global.turret_active);
                if new_guy != prev
                {
                    // GIVE LEADER ROLE
                    global.leader = new_guy;
                    // PLAY SOUND
                    audio_play_sound(sndBwop01, 10, false);
                    
                    with global.leader
                    {
                        timers[timer.chosen01] = room_speed * 0.75
                        cross = oCross;
                        oCross.player = id;
                        state = new_state;
                    }
                    
                    // THAT OTHER GUY
                    with prev
                    {
                        timers[timer.chosen01] = 0;
                        cross = noone;
                        state = new_state;
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
