<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT SPAWNING

    t = array_create(spawntimer.stop);
    
    friendly_x = global.start_x1;
    friendly_y = global.start_y1;
    
    enemy_x = global.start_x2;
    enemy_y = global.start_y2;
    
    make_chest(global.start_x1-CELL*3, global.start_y1, choose(itemtype.ranged_weapon, itemtype.melee_weapon), -1, -1, 0, 5);
    make_chest(global.start_x1-CELL*3, global.start_y1-CELL*2, itemtype.weapon, -1, -1, 0, 5);
    make_chest(global.start_x1-CELL*3, global.start_y1+CELL*2, choose(itemtype.ranged_weapon, itemtype.melee_weapon), -1, -1, 0, 5);
    
    make_chest(global.start_x1-CELL, global.start_y1-CELL*3, itemtype.armor, -1, -1, 0, 5);
    make_chest(global.start_x1+CELL, global.start_y1-CELL*3, itemtype.armor, -1, -1, 0, 5);
    
    make_chest(global.start_x1-CELL, global.start_y1+CELL*3, itemtype.implant1, -1, -1, 0, 5);
    make_chest(global.start_x1+CELL, global.start_y1+CELL*3, itemtype.implant1, -1, -1, 0, 5);
    
    make_chest(global.start_x1+CELL*3, global.start_y1-CELL, itemtype.turret, -1, -1, 0, 5);
    make_chest(global.start_x1+CELL*3, global.start_y1+CELL, itemtype.turret, -1, -1, 0, 5);
    
    //var pos = random_radius(global.start_x1 + CELL*18, global.start_y1 - CELL*12, 0);
    
    // WEAPONS SHOP
    var pos = random_radius(global.start_x1 + CELL*15, global.start_y1 - CELL*15, 0);
    
    with instance_create(pos[0], pos[1], oShop)
    {
        sells_type = itemtype.weapon;
        dir = RIGHT*90;
        item_cost = 15;
        name_text = "MASTER OF ARMS #15kr: new weapon";
    }
    
    // TURRET SHOP
    pos = random_radius(global.start_x1 + CELL*21, global.start_y1 - CELL*15, 0);
    
    with instance_create(pos[0], pos[1], oShop)
    {
        sells_type = itemtype.turret;
        dir = LEFT*90;
        item_cost = 15;
        name_text = "MECHANIC #15kr: new turret weapon";
    }
    
    // ARMOR SHOP
    pos = random_radius(global.start_x1 + CELL*15, global.start_y1 - CELL*9, 0);
    
    with instance_create(pos[0], pos[1], oShop)
    {
        sells_type = itemtype.armor;
        dir = LEFT*90;
        item_cost = 25;
        name_text = "ARMOURER #25kr: new armor";
    }
    
    // IMPLANT SHOP
    pos = random_radius(global.start_x1 + CELL*21, global.start_y1 - CELL*9, 0);
    
    with instance_create(pos[0], pos[1], oShop)
    {
        sells_type = itemtype.implant1;
        dir = UP*90;
        item_cost = 35;
        name_text = "BRAINSURGEON #35kr: new implant";
    }
    
    // HEALTH SHOP
    pos = random_radius(global.start_x1 + CELL*18, global.start_y1 + CELL*12, CELL);
    
    var hpshop = instance_create(pos[0], pos[1], oShop_hp);
    with hpshop
    {
        dir = UP * 90;
    }
    
    // NICE TOWERS
    with instance_create(friendly_x + CELL*5, friendly_y, oTower_frd)
    {
        stats_a[?"hpmax"] = 1500;
        stats_a[?"hp"] = 1500;
        
        act = FIGHT;
        deployed = true;
        
        dir = point_direction(x, y, other.enemy_x, other.enemy_y);
        fire_angle = 180;
        
        angle1 = dir - fire_angle;
        angle2 = dir + fire_angle;
        
        turret.d_dir = dir;
        d_dir = dir;
        spd = 0;
        state = player_mounted;
    }
    
    // NICE TOWERS II
    with instance_create(friendly_x+CELL*24, friendly_y, oTower_frd)
    {
        stats_a[?"hpmax"] = 1500;
        stats_a[?"hp"] = 1500;
        
        act = FIGHT;
        deployed = true;
        
        dir = point_direction(x, y, other.enemy_x, other.enemy_y);
        fire_angle = 180;
        
        angle1 = dir - fire_angle;
        angle2 = dir + fire_angle;
        
        turret.d_dir = dir;
        d_dir = dir;
        spd = 0;
        state = player_mounted;
    }
    
    // BAD TOWERS
    with instance_create(enemy_x-CELL*5, enemy_y, oTower_nme)
    {
        stats_a[?"hpmax"] = 1500;
        stats_a[?"hp"] = 1500;
        
        act = FIGHT;
        deployed = true;
        
        dir = point_direction(x, y, other.friendly_x, other.friendly_y);
        fire_angle = 180;
        
        angle1 = dir - fire_angle;
        angle2 = dir + fire_angle;
        
        turret.d_dir = dir;
        d_dir = dir;
        spd = 0;
        state = player_mounted;
    }
    
    // BAD TOWERS
    with instance_create(enemy_x-CELL*24, enemy_y, oTower_nme)
    {
        stats_a[?"hpmax"] = 1500;
        stats_a[?"hp"] = 1500;
        
        act = FIGHT;
        deployed = true;
        
        dir = point_direction(x, y, other.friendly_x, other.friendly_y);
        fire_angle = 180;
        
        angle1 = dir - fire_angle;
        angle2 = dir + fire_angle;
        
        turret.d_dir = dir;
        d_dir = dir;
        spd = 0;
        state = player_mounted;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATER

    if global.started == true
    {
        update_spawn_timers();
    
        if t[spawntimer.main01] &lt;= 0
        {
    
            // DING DING DING    
            global.r1 += 3.5;
            var pos = 0;
            
            // SET SPAWN TIMER
            t[spawntimer.main01] = round(rnd(room_speed * 60, room_speed * 2.5));
            
            // WAVE CLEARED
            global.waves_cleared++;
            
            // THE SPAWNING
            repeat(1)
            {
                // NICE GUYS
                repeat(3)
                {
                    pos = random_radius(friendly_x, friendly_y, CELL);
                    with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_droid)
                    {
                        eq_wpn = unit_data.creepwpn[?"sword"];
                        state = creep_idle_state;
                    }
                }
                
                // RANGED GUYS
                repeat(2)
                {
                    pos = random_radius(friendly_x, friendly_y, CELL);
                    with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_droid)
                    {
                        eq_wpn = unit_data.creepwpn[?"gun"];
                        state = creep_idle_state;
                    }
                }
                
                // BAD GUYS ===== ===== ===== ===== ===== =====
                
                var gland = 1 + irandom(global.waves_cleared*3.5);
                var melee_guys = 1 + irandom(global.waves_cleared * 3.5);
                var ranged_guys = 1 + irandom(global.waves_cleared * 3.25);
                
                // MELEE
                repeat(3)
                {
                    pos = random_radius(enemy_x, enemy_y, CELL);
                    with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
                    {
                        sprite = unit_data.sprite_map[?"shell"];
                        eq_wpn = unit_data.creepwpn[?"unarmed"];
                        state = creep_idle_state;
                    }
                }
                // EXTRA MELEE
                repeat(melee_guys)
                {
                    if random(1) &lt; 0.35
                    {
                        pos = random_radius(enemy_x, enemy_y, CELL);
                        with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
                        {
                            sprite = unit_data.sprite_map[?"shell"];
                            eq_wpn = unit_data.creepwpn[?"unarmed"];
                            state = creep_idle_state;
                        }
                    }
                }
                
                // RANGED
                repeat(2)
                {
                    pos = random_radius(enemy_x, enemy_y, CELL);
                    with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
                    {
                        eq_wpn = unit_data.creepwpn[?"gun"];
                        state = creep_idle_state;
                    }
                }
                // EXTRA RANGED
                repeat(ranged_guys)
                {
                    if random(1) &lt; 0.25
                    {
                        pos = random_radius(enemy_x, enemy_y, CELL);
                        with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
                        {
                            eq_wpn = unit_data.creepwpn[?"gun"];
                            state = creep_idle_state;
                        }
                    }
                }
                
                // GLAND
                repeat(gland)
                {
                    if random(1) &lt; 0.35
                    {
                        pos = random_radius(enemy_x, enemy_y, CELL);
                        with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oGland01)
                        {
                            eq_wpn = unit_data.creepwpn[?"unarmed"];
                            state = creep_idle_state;
                        }
                    }
                }
                
                // CRAYBEAST
                repeat(gland)
                {
                    if random(1) &lt; 0.1
                    {
                        pos = random_radius(enemy_x, enemy_y, CELL);
                        with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCraybeast)
                        {
                            eq_wpn = unit_data.weapons[?"talons"];
                            state = creep_idle_state;
                        }
                    }
                }
            }
        }
    }
    
    // HARD MODE PLS
    get_input();
    
    if keyboard_check(vk_lshift)
    &amp;&amp; keyboard_check_pressed(ord('S'))
    {
        var gland = 1 + irandom(global.waves_cleared*3.5);
        var melee_guys = 1 + irandom(global.waves_cleared * 3.5);
        var ranged_guys = 1 + irandom(global.waves_cleared * 3.25);
        
        // MELEE
        repeat(3)
        {
            pos = random_radius(enemy_x, enemy_y, CELL);
            with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
            {
                sprite = unit_data.sprite_map[?"shell"];
                eq_wpn = unit_data.creepwpn[?"unarmed"];
                state = creep_idle_state;
            }
        }
        // EXTRA MELEE
        repeat(melee_guys)
        {
            if random(1) &lt; 0.35
            {
                pos = random_radius(enemy_x, enemy_y, CELL);
                with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
                {
                    sprite = unit_data.sprite_map[?"shell"];
                    eq_wpn = unit_data.creepwpn[?"unarmed"];
                    state = creep_idle_state;
                }
            }
        }
        
        // RANGED
        repeat(2)
        {
            pos = random_radius(enemy_x, enemy_y, CELL);
            with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
            {
                eq_wpn = unit_data.creepwpn[?"gun"];
                state = creep_idle_state;
            }
        }
        // EXTRA RANGED
        repeat(ranged_guys)
        {
            if random(1) &lt; 0.25
            {
                pos = random_radius(enemy_x, enemy_y, CELL);
                with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCreep_shell)
                {
                    eq_wpn = unit_data.creepwpn[?"gun"];
                    state = creep_idle_state;
                }
            }
        }
        
        // GLAND
        repeat(gland)
        {
            if random(1) &lt; 0.35
            {
                pos = random_radius(enemy_x, enemy_y, CELL);
                with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oGland01)
                {
                    eq_wpn = unit_data.creepwpn[?"unarmed"];
                    state = creep_idle_state;
                }
            }
        }
        
        // CRAYBEAST
/*        repeat(gland)
        {
            if random(1) &lt; 0.1
            {
                pos = random_radius(enemy_x, enemy_y, CELL);
                with instance_create(rnd(pos[0], CELL), rnd(pos[1], CELL), oCraybeast)
                {
                    eq_wpn = unit_data.weapons[?"talons"];
                    state = creep_idle_state;
                }
            }
        }*/
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
