<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT TRAIL

    xx = x;
    yy = y;
    decr = 0;
    hit_mixed = 0;
    col_mixed = 0;
    rate = 0;
    hue = random(255);
    hued = random(35);
    sat = random(255);
    satd = random(35);
    val = random(255);
    vald = random(255);
    col = make_colour_hsv(hue, sat, val);
    depth = -y;
    ymod = 0;
    life = 0;
    count = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UPDATE TRAIL

    depth = -y;
    yy -= ymod;
//    ymod += (1 / image_alpha) * 0.015;
/*    image_xscale -= decr;
    image_yscale = image_xscale;
    if image_xscale != image_yscale { image_yscale = image_xscale; }*/

    x = rnd(xx, 2);
    y = rnd(yy, 2);
    
    var time = global.time;
    
//    visible = !visible;
    
//    mixed = 0.75 + random(0.25);

    var nhue = pulse(time, rate, hued, hue);
    var nsat = pulse(time, rate, satd, sat);
    var nval = pulse(time, rate, vald, val);
    
    col = make_colour_hsv(nhue, nsat, nval);
    
//    image_blend = col;
    
//    if random(1) &gt; image_alpha { visible = !visible; }
    
    image_alpha -= decr;
//    image_alpha = ease_in_cubic((image_alpha - decr) / 1, 0, 1, 1);
    
//    if image_alpha &lt;= 0 { instance_destroy(); }
    
    if count &gt; 0 { count--; }
    else
    {   instance_destroy(); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SHADER

    if hit_mixed &gt; 0
    {
        // HIT MIXER
        shader_set(shMix);
        var mix_u = shader_get_uniform(shMix, "u_vMix");
//        var mix = hit_mixed;
        shader_set_uniform_f(mix_u, hit_mixed);
        draw_self();
        shader_reset();
    }
    else
    {
        draw_self();
    }
    
    if col_mixed &gt; 0
    {
        // COLOR MIXER
        shader_set(shMixColor);
        var u_color = shader_get_uniform(shMixColor, "color01");
        var u_mix = shader_get_uniform(shMixColor, "u_vMixColor");
    
        var red = colour_get_red(col) / 255;
        var green = colour_get_red(col) / 255;
        var blue = colour_get_red(col) / 255;
        
        shader_set_uniform_f(u_mix, col_mixed);
        shader_set_uniform_f(u_color, red, green, blue);
        draw_self();
        shader_reset();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
